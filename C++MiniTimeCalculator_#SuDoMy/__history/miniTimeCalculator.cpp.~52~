//---------------------------------------------------------------------------

#include <vcl.h>
#pragma hdrstop

#include "miniTimeCalculator.h"

//----
//#include "String"
#include <iostream>
#include <string>
//#include "sclibchrono.h"

//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.dfm"
TMiniTmeCalculator *MiniTmeCalculator;
//---------------------------------------------------------------------------


//--- CONSTRUCTEUR
__fastcall TMiniTmeCalculator::TMiniTmeCalculator(TComponent* Owner)
	: TForm(Owner)
{
SGRanked->Cells[0][0] = "Rang";
SGRanked->Cells[1][0] = "N° dossard";
SGRanked->Cells[2][0] = "H de départ";
SGRanked->Cells[3][0] = "H d'arrivée";
SGRanked->Cells[4][0] = "Temps";
SGRanked->Cells[5][0] = "EcartTemps";



/*

bool TSCChrono::IsBetter(int num1, int num2) const
{
	if (mpDbTimeInfos == NULL) return false;
	int time1 = mpDbTimeInfos->GetTime(num1);
	int time2 = mpDbTimeInfos->GetTime(num2);
	time1 += mpDbTimeInfos->GetPenalty(num1);
	time2 += mpDbTimeInfos->GetPenalty(num2);
	time1 -= GetBonusByNum(num1);
	time2 -= GetBonusByNum(num2);
	if (time1 < time2) return true;
	if (time2 < time1) return false;
	return (num1 < num2);
}
*/

}
//---------------------------------------------------------------------------
// Si BDD -> TDBGrid
void __fastcall TMiniTmeCalculator::BtnAddTimeClick(TObject *Sender)
{


AnsiString listeRang;
// AnsiString plutot ?

//--- Compte les Colonnes, pour les nommées
int nbOfCol = 0;
nbOfCol = SGRanked->RowCount;

int nbBib = 0;// Verif int + 99 999 value
__int64 iStartHour = 0;
__int64 iEndHour = 0;

// Charges les données entré par le chronométreur
nbBib = EditNbBib->Text;
// Convertir String to int




listeRang =  EditStartHour->Text;
//.c_str());
//iStartHour = (listeRang.c_str());
//iEndHour = EditEndHour->Text;

// iStartHour = stoi(listeRang);

//for (int i = 0; i > 15; i++)
//{
//	SGRanked->Cells.Insert(listeRang, i);
	nbBib++;
//	SGRanked->Cells[0][1] = "1";
	SGRanked->Cells[0][nbBib] = "1";

//	SGRanked->Cells[0][nbBib] = "2";
//
//	SGRanked->Cells[0][nbBib] = "3";
//}

//--- Méthode de classement à implémenter.

//--- Distribuer dans les colonnes les infos au bon endroit

//--- Pour les données, le fair sous une forme de liste ?
// COmmencer à 1 comme dans SoftCOntrol ? ? ?

//---
//  return 0;
}
//---------------------------------------------------------------------------

//---- Mes Classes Méthodes





//---------------------------------------------------------------------------
//--- Méthode SoftControl
/*
void SCremoveRightSpaceDirectA(AnsiString& src)
{
    int i = src.Length();
    while (i > 0 && src[i] == ' ') src.Delete(i--, 1);
}

//     AnsiString TMiniTmeCalculator::SCscanRecordA(const AnsiString &src, int field, AnsiString separator, AnsiString delimitor, bool remove_right_space)
AnsiString SCscanRecordA(const AnsiString &src, int field, AnsiString separator, AnsiString delimitor, bool remove_right_space)
{
    int i,j;
    if (separator.IsEmpty() || field <= 0) return "";
	AnsiString result(src);
    //---elimination caractères spéciaux
	j = result.Pos(AnsiString(char(13)));
    if (j != 0) result.Delete(j, src.Length()-j+1);
    //---1.champ
    if (field == 1)
        {
        j = result.Pos(separator);
        if (j!= 0) result.Delete(j, src.Length()-j+1);
        }
	//---x.champ (S : séparateur, D : délimiteur)
    if (field > 1)
		{
		// 1. supprimer tous les champs précédents : (y compris le dernier S)
        for (i=1; i < field; i++)
			{
			if (!delimitor.IsEmpty() && result.Pos(delimitor) == 1) // si le champ i commence par un D, tout supprimer jusqu'au S suivant exclu
				{
				result.Delete(1, delimitor.Length());
				bool bEndFound = false;
				while(!bEndFound)
					{
					j = result.Pos(delimitor); // D suivant
					if (j==0) bEndFound = true; // si pas de D, il faut supprimer tout jusqu'au prochain S
					else
						{
						result.Delete(1, j + delimitor.Length() - 1); // on supprime tout jusqu'au D inclus
						if (result.IsEmpty() || result.Pos(separator) == 1) bEndFound = true;
						}
					}
				}
			// recherche du S suivant
            j = result.Pos(separator);
            if (j == 0) return "";
            result.Delete(1, j + separator.Length() - 1);
            }
        // 3. recherche du S suivant dans result (result = chaîne restante après le séparateur field-1 : "1,2,...,n-1" retiré, reste "n, n+1, ..." où il faut extraire n)
		if (!delimitor.IsEmpty() && result.Pos(delimitor) == 1) // si le champ i commence par un D, chercher la position du D suivant en retenant uniquement le D suivi d'un S ou le D en fin de chaîne
			{
			result.Delete(1, delimitor.Length());    // retrait du premier D : DaSaDaSbbb => aSaDaSbbb (ex. : "a,a"a,bbb => a,a"a,bbb
			j = result.Pos(delimitor); // D suivant
			if (j==0)
				{
				j = result.Pos(separator); // S suivant
				if (j==0) return result; // si pas de S suivant, on renvoie tout ce qui reste
				else return delimitor + result.SubString(1, j-1);
				}
			else return result.SubString(1, j-1);
			}
		// recherche du S suivant
		j = result.Pos(separator);
		// 4. s'il y a un S, supprimer ce qui est après
        if (j!= 0) result.Delete(j, src.Length() - j + 1);
        }
    //---elimination des espaces
    if (remove_right_space)
        SCremoveRightSpaceDirectA(result);
    return (result);
}


//double TMiniTmeCalculator::SCstringToDouble(AnsiString src, bool isSoftControlVersion)
double SCstringToDouble(AnsiString src, bool isSoftControlVersion)
{
	int i1, i2, i2len;
	bool negatif = (src.Pos(WideString("-")) != 0);
    if (src.Pos(WideString(".")) != 0)
        {
        AnsiString zz = "";
        if (isSoftControlVersion) // les versions logicielles Soft Control étant du format : "x.y.zz"
            {
            zz = SCscanRecordA(src, 3, ".");
            }
        i1 = AnsiString(SCscanRecordA(src, 1, ".")).ToIntDef(0);
        i2 = AnsiString(SCscanRecordA(src, 2, ".") + zz).ToIntDef(0);
        i2len = SCscanRecordA(src, 2, ".").Length() + zz.Length();
        }
    else if (src.Pos(",") != 0)
        {
        i1 = AnsiString(SCscanRecordA(src, 1, ",")).ToIntDef(0);
        i2 = AnsiString(SCscanRecordA(src, 2, ",")).ToIntDef(0);
        i2len = SCscanRecordA(src, 2, ",").Length();
        }
    else
        {
        i1 = src.ToIntDef(0);
        i2 = 0;
        i2len = 0;
        }
    int div = 1;
    for (int i=1; i<=i2len; i++) div *= 10;
	double value = SCabs(i1);
	value += double(i2)/div;
	if(negatif && value > 0) value *= -1.0;
    return value;
}
*/

